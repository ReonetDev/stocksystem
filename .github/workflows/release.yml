name: Release New Version

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Wine (for Windows build on Linux)
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine32

      - name: Create Production AppSettings
        env:
          APPSETTINGS_JSON: ${{ secrets.PRODUCTION_APPSETTINGS }}
        run: echo "$APPSETTINGS_JSON" > ./StockControlSystem.API/appsettings.json

      - name: Publish API for Windows
        run: dotnet publish ./StockControlSystem.API -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/win-x64

      - name: Create API directory in client-app
        run: mkdir -p ./client-app/api

      - name: Copy Windows API to client-app
        run: cp -r ./publish/win-x64/ ./client-app/api/

      - name: Install client-app dependencies
        run: npm install
        working-directory: ./client-app

      - name: Package Electron app for Windows
        run: npx electron-builder --win
        working-directory: ./client-app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: client-app/release/

  build-macos:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Create Production AppSettings
        env:
          APPSETTINGS_JSON: ${{ secrets.PRODUCTION_APPSETTINGS }}
        run: echo "$APPSETTINGS_JSON" > ./StockControlSystem.API/appsettings.json

      - name: Publish API for macOS
        run: dotnet publish ./StockControlSystem.API -c Release -r osx-arm64 --self-contained true -p:PublishSingleFile=true -o ./publish/osx-arm64

      - name: Create API directory in client-app
        run: mkdir -p ./client-app/api

      - name: Copy macOS API to client-app
        run: cp -r ./publish/osx-arm64/ ./client-app/api/

      - name: Install client-app dependencies
        run: npm install
        working-directory: ./client-app

      - name: Package Electron app for macOS
        run: npx electron-builder --mac
        working-directory: ./client-app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get App Version
        id: get_version
        run: echo "version=$(node -p \"require('./client-app/package.json').version\")" >> $GITHUB_OUTPUT

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: client-app/release/

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: release-artifacts/windows

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: release-artifacts/macos

      - name: Create Git Tag
        id: create_tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-macos.outputs.version }}
          draft: true # Create as draft first
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/windows/*.exe
            release-artifacts/macos/*.dmg
            release-artifacts/macos/*.zip
            release-artifacts/macos/latest-mac.yml
          tag_name: v${{ needs.build-macos.outputs.version }}
          draft: true # Keep as draft
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}